#!/usr/cds/env python
# -*- coding: utf-8 -*-

configtbl: "config/config.yaml"

import os
import pandas as pd
import yaml
import logging


from utils import utils
from utils import log


wlogger = log.setlogger(__name__)



CDS = utils.parse_input(config["INPUT"] , config["extension"] )


if not CDS:
    wlogger.error("Can't retrieve your input files :( you might check your input or the genome extension.")
    exit(-1)

####################################################################################################
'''
    Search calcyanin within CDS.
'''
####################################################################################################


rule target_pycalf:
    input:
        expand(
            os.path.join(config["RESDIR"],"pycalf.{tbl}.tsv"),tbl=["summary","features"]
        )


rule expand_pycalf:
    output:
        os.path.join(config["RESDIR"],"pycalf.{tbl}.tsv")
    input:
        expand(
            os.path.join(config["RESDIR"], "tmp" ,"{cds}","reformat.{{tbl}}.tsv"),
        cds=CDS.keys()),
    shell:
        "head -n 1 {input[0]} > {output} && "
        "tail -n +2 -q {input} >> {output} "        

rule parse_tbl:
    output:        
        temp(os.path.join(config["RESDIR"], "tmp" ,"{cds}","reformat.{tbl}.tsv")),
    input:
        os.path.join(config["RESDIR"], "tmp","{cds}","{tbl}.tsv"),
    params:
        tmp = os.path.join(config["RESDIR"], "tmp"),
    shell:         
        "find {params.tmp} -name {wildcards.tbl}.csv -type f -size +0 | head -n 1 {input} | sed 's/$/\tsrctbl/g' > {output} && "
        "tail -n +2 -q {input} | sed 's/$/\t{wildcards.cds}/g' >> {output} || touch {output} "  # handle silent error

rule pycalf:
    output:
        os.path.join(config["RESDIR"], "tmp","{cds}","summary.tsv"),
        os.path.join(config["RESDIR"], "tmp","{cds}","features.tsv")        
    input:
        os.path.join(config["RESDIR"], "tmp","{cds}","{cds}.fasta")
    log:
        os.path.join(config["RESDIR"],"tmp","pycalf.{cds}.log")
    params:
        outdir = os.path.join(config["RESDIR"], "tmp","{cds}"),
        cmd = lambda wildcards : "gunzip -c" if CDS[wildcards.cds].endswith(".gz") \
            else "cat",
        glyx3 = config["glyx3_phmm"],
        domz = config["domz"],
        glyx3cov = config["gly3_coverage_threshold"],
        glyx3eval = config["gly3_evalue_threshold"],
        glyx3ieval = config["gly3_i_evalue_threshold"],
        keepall = "--keep-all" if config["keep_all"] else "",
        nterdb = config["nterdb_fa"],
        ntertbl = config["nterdb_tab"],
        ntercov = config["nter_coverage"],
        ntereval = config["nter_evalue"],
        gly1 = config["gly1_phmm"],
        gly2 = config["gly2_phmm"],
        gly3 = config["gly3_phmm"],
        glyzipieval = config["glyzip_i_evalue"],
        glyzipeval = config["glyzip_evalue"],
        blastp = "--blastp {}".format(config["blastp"]) if config["blastp"] else "", 
    shell:
        "{params.cmd} {input} | pycalf -i - "
        "-o {params.outdir} "        
        "--glyx3-hmm {params.glyx3} "
        "--domz {params.domz} "
        "--glyx3-coverage {params.glyx3cov} "
        "--glyx3-evalue {params.glyx3eval} "
        "--glyx3-i-evalue {params.glyx3ieval} "
        "{params.keepall} "
        "--nterdb {params.nterdb} "
        "--nter-mapping-file {params.ntertbl} "
        "--nter-coverage {params.ntercov} "
        "--nter-evalue {params.ntereval} "     
        "--gly1-phmm {params.gly1} "        
        "--gly2-phmm {params.gly2} "        
        "--gly3-phmm {params.gly3} "        
        "--glyzip-i-evalue {params.glyzipieval} "        
        "--glyzip-evalue {params.glyzipeval}  "       
        "{params.blastp} "                
        "--threads 15 "
        "--force "
        "&> {log} && touch {output}"
        
        
rule sanitize_cds:
    output:
        temp(os.path.join(config["RESDIR"], "tmp","{cds}","{cds}.fasta")),       
    input:
        cds = lambda wildcards: CDS[wildcards.cds], #os.path.join(RESDIR,DATE,"datas","cds", "{assembly}_translated_cds.faa.gz"),
    params:
        cmd = lambda wildcards,input :  "gunzip -c" if str(input.cds).endswith(".gz")\
                 else "cat"        
    shell:
        "{params.cmd} {input.cds} | sed 's/-//g' > {output} "
